#!/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'fileutils'
require 'uglifier'

@dist_dir = 'docs/dist'

def combine(list_of_files, output_file = 'out.txt')
  File.open(output_file, 'w') { |f| f.puts(list_of_files.map { |s| IO.read(s) }) }
  system "sed -i '' '/sourceMappingURL/d' ./#{output_file}"
end

def minify_js(source, output)
  File.open(output, 'w') { |file| file.write(Uglifier.compile(File.read(source))) }
end

def fs_jquery(file)
  combine(['assets/javascripts/fontstrap/fontstrap_header.txt',
           'assets/javascripts/fontstrap/fontstrap-utilities.js',
           "assets/javascripts/fontstrap/#{file}"], "#{@dist_dir}/js/fontstrap/fs-#{file}")
end

namespace :test do
  task :html do
    system 'open docs/examples/*.html'
  end

  task :sass do
    system 'sass-lint'
  end

  task all: :html
end

namespace :fs do
  #####
  # This task will create the necessary directories should they not already exist.  It initilizes with cleanup.
  #####
  task create_dirs: :cleanup do
    FileUtils.mkdir_p("#{@dist_dir}/css") unless Dir.exist? "#{@dist_dir}/css"
    FileUtils.mkdir_p("#{@dist_dir}/css/theme") unless Dir.exist? "#{@dist_dir}/css/theme"
    FileUtils.mkdir_p("#{@dist_dir}/img") unless Dir.exist? "#{@dist_dir}/img"
  end

  #####
  # This task will copy images from assets to dist.
  #####
  task :move_images do
    FileUtils.cp('assets/images/favicon.png', "#{@dist_dir}/img/favicon.png")
  end

  #####
  # This task will move fonts, images, and javascript files from assets to their respective dist directory locations.
  #####
  task :create_js_files do
    FileUtils.mkdir_p('tmp') unless Dir.exist? 'tmp'
    combine(['assets/javascripts/fontstrap/fontstrap_header.txt',
             'assets/javascripts/fontstrap/storage.js',
             'assets/javascripts/fontstrap/fontstrap-utilities.js',
             'assets/javascripts/fontstrap/alignBlocks.jquery.js',
             'assets/javascripts/fontstrap/dynamicToasts.jquery.js',
             'assets/javascripts/fontstrap/fullScreenBackground.jquery.js',
             'assets/javascripts/fontstrap/imagePopOut.jquery.js',
             'assets/javascripts/fontstrap/offcanvasMenu.jquery.js',
             'assets/javascripts/fontstrap/keepOnScreen.jquery.js',
             'assets/javascripts/fontstrap/zoomIn.jquery.js'], 'tmp/fontstrap-features.js')
    minify_js('tmp/fontstrap-features.js', 'tmp/fontstrap-features.min.js')

    FileUtils.mkdir_p("#{@dist_dir}/js") unless Dir.exist? "#{@dist_dir}/js"
    combine(['assets/javascripts/third_party/popper.min.js',
             'assets/javascripts/bootstrap/bootstrap.min.js',
             'assets/javascripts/fontawesome/all.min.js',
             'assets/javascripts/third_party/lodash.min.js',
             'tmp/fontstrap-features.min.js'], "#{@dist_dir}/js/fontstrap.min.js")

    FileUtils.mkdir_p("#{@dist_dir}/js/fontstrap") unless Dir.exist? "#{@dist_dir}/js/fontstrap"
    fs_jquery('storage.js')
    fs_jquery('alignBlocks.jquery.js')
    fs_jquery('dynamicToasts.jquery.js')
    fs_jquery('fullScreenBackground.jquery.js')
    fs_jquery('imagePopOut.jquery.js')
    fs_jquery('offcanvasMenu.jquery.js')
    fs_jquery('keepOnScreen.jquery.js')
    fs_jquery('zoomIn.jquery.js')

    FileUtils.mkdir_p("#{@dist_dir}/js/third_party") unless Dir.exist? "#{@dist_dir}/js/third_party"
    FileUtils.cp('assets/javascripts/third_party/lodash.min.js', "#{@dist_dir}/js/third_party/lodash.min.js")
    FileUtils.cp('assets/javascripts/third_party/jquery.min.js', "#{@dist_dir}/js/third_party/jquery.min.js")
  end

  #####
  # This task combines create_dirs and move_static_content.
  #####
  task setup: %i[create_dirs create_js_files move_images]

  #####
  # This task removes the dist directory.
  #####
  task :cleanup do
    FileUtils.remove_dir "#{@dist_dir}/css" if Dir.exist? "#{@dist_dir}/css"
  end

  #####
  # This task combines cleanup, setup, and compile.
  #####
  task reset: %i[cleanup compile]

  #####
  # This task will create the minified version of the fontstrap css.  It initilizes with setup.
  #####
  task compile: :setup do
    system "sass assets/stylesheets/_fontstrap.scss #{@dist_dir}/css/fontstrap.min.css --style compressed"
    system "sass assets/stylesheets/_fontstrap_square.scss #{@dist_dir}/css/theme/fontstrap-square.min.css --style compressed"
    system "sass assets/stylesheets/_fontstrap_ice-cream.scss #{@dist_dir}/css/theme/fontstrap-ice-cream.min.css --style compressed"
    system "sass assets/stylesheets/_fontstrap_neon.scss #{@dist_dir}/css/theme/fontstrap-neon.min.css --style compressed"
    system "sass assets/stylesheets/_fontstrap_depth.scss #{@dist_dir}/css/theme/fontstrap-depth.min.css --style compressed"
  end

  #####
  # This task will create the non minified version of the fontstrap css.  It initilizes with setup.
  #####
  task compile_full: :setup do
    system "sass assets/stylesheets/_fontstrap.scss #{@dist_dir}/css/fontstrap.css"
    system "sass assets/stylesheets/_fontstrap_square.scss #{@dist_dir}/css/theme/fontstrap-square.css"
    system "sass assets/stylesheets/_fontstrap_ice-cream.scss #{@dist_dir}/css/theme/fontstrap-ice-cream.min.css"
    system "sass assets/stylesheets/_fontstrap_neon.scss #{@dist_dir}/css/theme/fontstrap-neon.min.css"
    system "sass assets/stylesheets/_fontstrap_depth.scss #{@dist_dir}/css/theme/fontstrap-depth.min.css"
  end

  #####
  # This task will create the minified version of fontrap css and then continue to watch for more changes.  It initilizes with setup.  You will need to use `ctrl + c` to stop.
  #####
  task :watch do
    system "sass --watch assets/stylesheets/_fontstrap.scss:#{@dist_dir}/css/fontstrap.min.css --style compressed"
  end

  #####
  # This task will create the minified version of square fontrap css and then continue to watch for more changes.  It initilizes with setup.  You will need to use `ctrl + c` to stop.
  #####
  task :watch_square do
    system "sass --watch assets/stylesheets/_fontstrap_square.scss:#{@dist_dir}/css/fontstrap-square.min.css --style compressed"
  end

  #####
  # This task will create the minified version of ice cream fontrap css and then continue to watch for more changes.  It initilizes with setup.  You will need to use `ctrl + c` to stop.
  #####
  task :watch_ice_cream do
    system "sass --watch assets/stylesheets/_fontstrap_ice-cream.scss:#{@dist_dir}/css/theme/fontstrap-ice-cream.min.css --style compressed"
  end

  #####
  # This task will create the minified version of neon fontrap css and then continue to watch for more changes.  It initilizes with setup.  You will need to use `ctrl + c` to stop.
  #####
  task :watch_neon do
    system "sass --watch assets/stylesheets/_fontstrap_neon.scss:#{@dist_dir}/css/theme/fontstrap-neon.min.css --style compressed"
  end

  #####
  # This task will create the minified version of neon fontrap css and then continue to watch for more changes.  It initilizes with setup.  You will need to use `ctrl + c` to stop.
  #####
  task :watch_depth do
    system "sass --watch assets/stylesheets/_fontstrap_depth.scss:#{@dist_dir}/css/theme/fontstrap-depth.min.css --style compressed"
  end
end
